// <auto-generated />
using System;
using ConnectFlow.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConnectFlow.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251005131142_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("ActiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AssignToUserId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastExecutedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("TriggerEvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignToUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AssignmentRule_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_AssignmentRule_TenantId_Created");

                    b.ToTable("AssignmentRules");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRuleCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentRulesSetId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("LogicalOperator")
                        .HasColumnType("integer");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("ValueTo")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentRulesSetId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AssignmentRuleCondition_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_AssignmentRuleCondition_TenantId_Created");

                    b.ToTable("AssignmentRuleConditions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRuleHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentRuleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityTitle")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("ExecutionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExecutionResult")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ExecutionTimeMs")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("NewAssignedUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousAssignedUserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("TriggerEventSource")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("TriggeredByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentRuleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NewAssignedUserId");

                    b.HasIndex("PreviousAssignedUserId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AssignmentRuleHistory_TenantId");

                    b.HasIndex("TriggeredByUserId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_AssignmentRuleHistory_TenantId_Created");

                    b.ToTable("AssignmentRuleHistories");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRulesSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignmentRuleId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LogicalOperator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentRuleId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_AssignmentRulesSet_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_AssignmentRulesSet_TenantId_Created");

                    b.ToTable("AssignmentRulesSets");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ChannelAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Contact")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("ProviderAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SettingsJson")
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ChannelAccount_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ChannelAccount_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_ChannelAccount_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ChannelAccount_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "ProviderAccountId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChannelAccount_TenantId_ProviderAccountId");

                    b.ToTable("ChannelAccounts");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LastScoredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("LeadId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PipelineId")
                        .HasColumnType("integer");

                    b.Property<int?>("PipelineStageId")
                        .HasColumnType("integer");

                    b.Property<int>("Probability")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<decimal?>("ScorePercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("SourceChannel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceChannelId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceOrigin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TaxType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("WonLossReason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("IX_Deal_OrganizationId");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Deal_OwnerId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_Deal_PersonId");

                    b.HasIndex("PipelineId")
                        .HasDatabaseName("IX_Deal_PipelineId");

                    b.HasIndex("PipelineStageId")
                        .HasDatabaseName("IX_Deal_PipelineStageId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Deal_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Deal_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Deal_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Deal_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_Deal_TenantId_Status");

                    b.HasIndex("TenantId", "OwnerId", "Status")
                        .HasDatabaseName("IX_Deal_TenantId_OwnerId_Status");

                    b.HasIndex("TenantId", "PipelineId", "PipelineStageId")
                        .HasDatabaseName("IX_Deal_TenantId_PipelineId_StageId");

                    b.ToTable("Deals");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealInstallment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("BillingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DealId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_DealInstallment_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_DealInstallment_TenantId_Created");

                    b.ToTable("DealInstallments");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalDiscount")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset?>("BillingStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int>("DealId")
                        .HasColumnType("integer");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealId")
                        .HasDatabaseName("IX_DealProduct_DealId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_DealProduct_ProductId");

                    b.HasIndex("ProductVariantId")
                        .HasDatabaseName("IX_DealProduct_ProductVariantId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_DealProduct_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_DealProduct_TenantId_Created");

                    b.HasIndex("TenantId", "ProductId")
                        .HasDatabaseName("IX_DealProduct_TenantId_ProductId");

                    b.ToTable("DealProducts");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealStageHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DealId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EnteredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExitedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCurrentStage")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("NextStageId")
                        .HasColumnType("integer");

                    b.Property<int>("PipelineId")
                        .HasColumnType("integer");

                    b.Property<int>("PipelineStageId")
                        .HasColumnType("integer");

                    b.Property<int?>("PreviousStageId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealId")
                        .HasDatabaseName("IX_DealStageHistory_DealId");

                    b.HasIndex("EnteredAt")
                        .HasDatabaseName("IX_DealStageHistory_EnteredAt");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NextStageId")
                        .HasDatabaseName("IX_DealStageHistory_NextStageId");

                    b.HasIndex("PipelineId")
                        .HasDatabaseName("IX_DealStageHistory_PipelineId");

                    b.HasIndex("PipelineStageId")
                        .HasDatabaseName("IX_DealStageHistory_PipelineStageId");

                    b.HasIndex("PreviousStageId")
                        .HasDatabaseName("IX_DealStageHistory_PreviousStageId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_DealStageHistory_TenantId");

                    b.HasIndex("DealId", "EnteredAt")
                        .HasDatabaseName("IX_DealStageHistory_DealId_EnteredAt");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_DealStageHistory_TenantId_Created");

                    b.ToTable("DealStageHistories");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssignedById")
                        .HasColumnType("integer");

                    b.Property<int?>("AssignedToId")
                        .HasColumnType("integer");

                    b.Property<string>("ConferenceUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("SchedulerBookingId")
                        .HasColumnType("integer");

                    b.Property<int?>("SequenceStepId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<int?>("TenantUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VisibilityOnCalendar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AssignedById")
                        .HasDatabaseName("IX_Activity_AssignedById");

                    b.HasIndex("AssignedToId")
                        .HasDatabaseName("IX_Activity_AssignedToId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SchedulerBookingId")
                        .HasDatabaseName("IX_Activity_SchedulerBookingId");

                    b.HasIndex("SequenceStepId")
                        .HasDatabaseName("IX_Activity_SequenceStepId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityActivity_TenantId");

                    b.HasIndex("TenantUserId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityActivity_TenantId_Created");

                    b.HasIndex("TenantId", "EndAt")
                        .HasDatabaseName("IX_Activity_TenantId_EndAt");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityActivity_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "StartAt")
                        .HasDatabaseName("IX_Activity_TenantId_StartAt");

                    b.HasIndex("TenantId", "Type")
                        .HasDatabaseName("IX_Activity_TenantId_Type");

                    b.HasIndex("TenantId", "AssignedToId", "Done")
                        .HasDatabaseName("IX_Activity_TenantId_AssignedToId_Done");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Activity_TenantId_EntityType_EntityId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityActivityParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("GuestEmail")
                        .HasColumnType("text");

                    b.Property<string>("GuestName")
                        .HasColumnType("text");

                    b.Property<string>("GuestPhoneNumber")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("EntityActivityParticipants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Context")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("text");

                    b.Property<string>("NewValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("PropertyDisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PropertyName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityChangeLog_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityChangeLog_TenantId_Created");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_ChangeLog_TenantId_EntityType_EntityId");

                    b.ToTable("ChangeLogs");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityComment_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityComment_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityComment_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Comment_TenantId_EntityType_EntityId");

                    b.ToTable("EntityComments");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityDocument_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityDocument_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityDocument_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Document_TenantId_EntityType_EntityId");

                    b.ToTable("EntityDocuments");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityFile_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityFile_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityFile_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_File_TenantId_EntityType_EntityId");

                    b.ToTable("EntityFiles");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AltText")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityImage_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityImage_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityImage_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Image_TenantId_EntityType_EntityId");

                    b.ToTable("EntityImages");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityLabel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LabelId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LabelId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("EntityType", "EntityId")
                        .HasDatabaseName("IX_EntityLabel_EntityType_EntityId");

                    b.ToTable("EntityLabels");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PinOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityNote_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityNote_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_EntityNote_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Note_TenantId_EntityType_EntityId");

                    b.ToTable("EntityNotes");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityParticipant_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityParticipant_TenantId_Created");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Participant_TenantId_EntityType_EntityId");

                    b.ToTable("EntityParticipants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<decimal?>("DirectCost")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntityPrice_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntityPrice_TenantId_Created");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Price_TenantId_EntityType_EntityId");

                    b.ToTable("EntityPrices");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntitySequenceEnrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("CurrentStepId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("EnrolledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EntityId")
                        .HasColumnType("integer");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("CurrentStepId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SequenceId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_EntitySequenceEnrollment_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_EntitySequenceEnrollment_TenantId_Created");

                    b.HasIndex("TenantId", "EntityType", "EntityId")
                        .HasDatabaseName("IX_Entity_Sequence_Enrollment_TenantId_EntityType_EntityId");

                    b.ToTable("EntitySequenceEnrollments");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Label_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Label_TenantId_Created");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<int?>("DealId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceChannel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SourceChannelId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SourceOrigin")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealId")
                        .IsUnique();

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("IX_Lead_OrganizationId");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Lead_OwnerId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_Lead_PersonId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Lead_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Lead_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Lead_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Lead_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "SourceChannel")
                        .HasDatabaseName("IX_Lead_TenantId_SourceChannel");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.NoteReaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("NoteId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("NoteReactions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal?>("AnnualRevenue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LinkedIn")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("NumberOfEmployees")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("Industry")
                        .HasDatabaseName("IX_Organization_Industry");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Organization_Name");

                    b.HasIndex("NumberOfEmployees")
                        .HasDatabaseName("IX_Organization_NumberOfEmployees");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Organization_OwnerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Organization_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Organization_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Organization_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Organization_TenantId_IsDeleted");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.OrganizationRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PrimaryOrganizationId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("RelatedOrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("RelationshipType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PrimaryOrganizationId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RelatedOrganizationId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_OrganizationRelationship_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_OrganizationRelationship_TenantId_Created");

                    b.ToTable("OrganizationRelationships");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("IX_Person_OrganizationId");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Person_OwnerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Person_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Person_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Person_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Person_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "LastName", "FirstName")
                        .HasDatabaseName("IX_Person_TenantId_Name");

                    b.ToTable("People");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PersonEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_PersonEmail_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_PersonEmail_TenantId_Created");

                    b.ToTable("PersonEmails");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PersonPhone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Extension")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PhoneType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PersonId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_PersonPhone_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_PersonPhone_TenantId_Created");

                    b.ToTable("PersonPhones");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Pipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("DealsProbabilityEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ScoringEnabled")
                        .HasColumnType("boolean");

                    b.Property<int?>("ScoringProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Pipeline_Name");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ScoringProfileId")
                        .HasDatabaseName("IX_Pipeline_ScoringProfileId");

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_Pipeline_SortOrder");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Pipeline_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Pipeline_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Pipeline_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Pipeline_TenantId_IsDeleted");

                    b.ToTable("Pipelines");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PipelineStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("PipelineId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_PipelineStage_Name");

                    b.HasIndex("PipelineId")
                        .HasDatabaseName("IX_PipelineStage_PipelineId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_PipelineStage_SortOrder");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_PipelineStage_TenantId");

                    b.HasIndex("PipelineId", "SortOrder")
                        .HasDatabaseName("IX_PipelineStage_PipelineId_SortOrder");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_PipelineStage_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_PipelineStage_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_PipelineStage_TenantId_IsDeleted");

                    b.ToTable("PipelineStages");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingCycle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("MaxChannels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxFacebookChannels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxInstagramChannels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxTelegramChannels")
                        .HasColumnType("integer");

                    b.Property<int>("MaxUsers")
                        .HasColumnType("integer");

                    b.Property<int>("MaxWhatsAppChannels")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentProviderPriceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentProviderProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Plans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingCycle = "Monthly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Basic plan with limited features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 1,
                            MaxFacebookChannels = 0,
                            MaxInstagramChannels = 0,
                            MaxTelegramChannels = 0,
                            MaxUsers = 2,
                            MaxWhatsAppChannels = 1,
                            Name = "Free",
                            PaymentProviderPriceId = "price_free",
                            PaymentProviderProductId = "",
                            Price = 0m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Free"
                        },
                        new
                        {
                            Id = 2,
                            BillingCycle = "Monthly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Starter plan with basic features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 3,
                            MaxFacebookChannels = 1,
                            MaxInstagramChannels = 1,
                            MaxTelegramChannels = 1,
                            MaxUsers = 5,
                            MaxWhatsAppChannels = 2,
                            Name = "Starter Plan - Monthly",
                            PaymentProviderPriceId = "price_1S1lFgDVRyfs46JiBJyvA5eu",
                            PaymentProviderProductId = "prod_SxgcF8F4u3unNk",
                            Price = 29.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Starter"
                        },
                        new
                        {
                            Id = 3,
                            BillingCycle = "Yearly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Starter plan with basic features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 3,
                            MaxFacebookChannels = 1,
                            MaxInstagramChannels = 1,
                            MaxTelegramChannels = 1,
                            MaxUsers = 5,
                            MaxWhatsAppChannels = 2,
                            Name = "Starter Plan - Yearly",
                            PaymentProviderPriceId = "price_1S1lHtDVRyfs46JizuWqnOp2",
                            PaymentProviderProductId = "prod_Sxgf0MdFfTzUXR",
                            Price = 299.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Starter"
                        },
                        new
                        {
                            Id = 4,
                            BillingCycle = "Monthly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Professional plan with advanced features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 10,
                            MaxFacebookChannels = 3,
                            MaxInstagramChannels = 3,
                            MaxTelegramChannels = 3,
                            MaxUsers = 25,
                            MaxWhatsAppChannels = 5,
                            Name = "Professional Plan - Monthly",
                            PaymentProviderPriceId = "price_1S1lIXDVRyfs46Jirxqm0dz6",
                            PaymentProviderProductId = "prod_SxgfAcz4HHgFcY",
                            Price = 99.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Pro"
                        },
                        new
                        {
                            Id = 5,
                            BillingCycle = "Yearly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Professional plan with advanced features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 10,
                            MaxFacebookChannels = 3,
                            MaxInstagramChannels = 3,
                            MaxTelegramChannels = 3,
                            MaxUsers = 25,
                            MaxWhatsAppChannels = 5,
                            Name = "Professional Plan - Yearly",
                            PaymentProviderPriceId = "price_1S1lJ3DVRyfs46Ji40RP91Sk",
                            PaymentProviderProductId = "prod_SxggEc36SZchwA",
                            Price = 999.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Pro"
                        },
                        new
                        {
                            Id = 6,
                            BillingCycle = "Monthly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Enterprise plan with all features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 50,
                            MaxFacebookChannels = 15,
                            MaxInstagramChannels = 15,
                            MaxTelegramChannels = 15,
                            MaxUsers = 100,
                            MaxWhatsAppChannels = 20,
                            Name = "Enterprise Plan - Monthly",
                            PaymentProviderPriceId = "price_1S1lJgDVRyfs46JidlIn73va",
                            PaymentProviderProductId = "prod_Sxgh4Ucpw7IxSG",
                            Price = 299.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Enterprise"
                        },
                        new
                        {
                            Id = 7,
                            BillingCycle = "Yearly",
                            Created = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Currency = "usd",
                            Description = "Enterprise plan with all features",
                            IsActive = true,
                            LastModified = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            MaxChannels = 50,
                            MaxFacebookChannels = 15,
                            MaxInstagramChannels = 15,
                            MaxTelegramChannels = 15,
                            MaxUsers = 100,
                            MaxWhatsAppChannels = 20,
                            Name = "Enterprise Plan - Yearly",
                            PaymentProviderPriceId = "price_1S1lKVDVRyfs46Ji1DJXRhHp",
                            PaymentProviderProductId = "prod_SxghGjm7I9Ugag",
                            Price = 2999.99m,
                            PublicId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Type = "Enterprise"
                        });
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("RecurringCycleCount")
                        .HasColumnType("integer");

                    b.Property<bool>("RenewUntilCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BillingFrequency")
                        .HasDatabaseName("IX_Product_BillingFrequency");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Product_CategoryId");

                    b.HasIndex("Code")
                        .HasDatabaseName("IX_Product_Code");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Product_Name");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Product_OwnerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Product_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Product_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Product_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Product_TenantId_IsDeleted");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProductCategory_Name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("IX_ProductCategory_ParentCategoryId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_ProductCategory_SortOrder");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProductCategory_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProductCategory_TenantId_Created");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProductVariant_Name");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("IX_ProductVariant_ProductId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProductVariant_TenantId");

                    b.HasIndex("ProductId", "Name")
                        .HasDatabaseName("IX_ProductVariant_ProductId_Name");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProductVariant_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ProductVariant_TenantId_IsDeleted");

                    b.ToTable("ProductVariants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonId")
                        .HasColumnType("integer");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectBoardId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("IX_Project_OrganizationId");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_Project_OwnerId");

                    b.HasIndex("PersonId")
                        .HasDatabaseName("IX_Project_PersonId");

                    b.HasIndex("Priority")
                        .HasDatabaseName("IX_Project_Priority");

                    b.HasIndex("ProjectBoardId")
                        .HasDatabaseName("IX_Project_ProjectBoardId");

                    b.HasIndex("ProjectPhaseId")
                        .HasDatabaseName("IX_Project_ProjectPhaseId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Project_Status");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Project_TenantId");

                    b.HasIndex("Status", "Priority")
                        .HasDatabaseName("IX_Project_Status_Priority");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Project_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Project_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Project_TenantId_IsDeleted");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProjectBoard_Name");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_ProjectBoard_SortOrder");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProjectBoard_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProjectBoard_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_ProjectBoard_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ProjectBoard_TenantId_IsDeleted");

                    b.ToTable("ProjectBoards");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectDeal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DealId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DealId");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProjectDeal_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProjectDeal_TenantId_Created");

                    b.ToTable("ProjectDeals");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectPhase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectBoardId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_ProjectPhase_Name");

                    b.HasIndex("ProjectBoardId")
                        .HasDatabaseName("IX_ProjectPhase_ProjectBoardId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SortOrder")
                        .HasDatabaseName("IX_ProjectPhase_SortOrder");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProjectPhase_TenantId");

                    b.HasIndex("ProjectBoardId", "SortOrder")
                        .HasDatabaseName("IX_ProjectPhase_ProjectBoardId_SortOrder");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProjectPhase_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_ProjectPhase_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ProjectPhase_TenantId_IsDeleted");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CompletionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset?>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDone")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentTaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectPhaseId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId")
                        .HasDatabaseName("IX_ProjectTask_AssigneeId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("ParentTaskId")
                        .HasDatabaseName("IX_ProjectTask_ParentTaskId");

                    b.HasIndex("ProjectPhaseId")
                        .HasDatabaseName("IX_ProjectTask_ProjectPhaseId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ProjectTask_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ProjectTask_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ProjectTask_TenantId_IsDeleted");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_ProjectTask_TenantId_Status");

                    b.HasIndex("TenantId", "AssigneeId", "Status")
                        .HasDatabaseName("IX_ProjectTask_TenantId_AssigneeId_Status");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Scheduler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AfterEventBufferTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("AvailableFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("AvailableTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BeforeEventBufferTimeMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("CustomBookingFormFields")
                        .HasColumnType("jsonb");

                    b.Property<string>("DefaultConferenceUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("DefaultDurationMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("DefaultLocation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("DefaultSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("FooterNote")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("FurthestNoticeToBookInFutureDays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPhoneNumberRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("ManageAvailabilityManually")
                        .HasColumnType("boolean");

                    b.Property<string>("MeetingDescription")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("MeetingNote")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("MinimumNoticeToBook")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("StartingIntervalMinutes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Timezone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UrlSlug")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("VisibleCompanyInfo")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Scheduler_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Scheduler_TenantId_Created");

                    b.ToTable("Schedulers");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerAvailability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultipleBookings")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("SchedulerId")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("SpecificDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SchedulerId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_SchedulerAvailability_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_SchedulerAvailability_TenantId_Created");

                    b.ToTable("SchedulerAvailabilities");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BookerEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("BookerName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("BookerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("BookingFormData")
                        .HasColumnType("jsonb");

                    b.Property<string>("BookingSource")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CancelledById")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<bool>("ReminderSent")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("ReminderSentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RescheduledFromBookingId")
                        .HasColumnType("integer");

                    b.Property<int?>("RescheduledToBookingId")
                        .HasColumnType("integer");

                    b.Property<int?>("SchedulerSlotId")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CancelledById");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("RescheduledFromBookingId")
                        .IsUnique();

                    b.HasIndex("RescheduledToBookingId")
                        .IsUnique();

                    b.HasIndex("SchedulerSlotId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_SchedulerBooking_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_SchedulerBooking_TenantId_Created");

                    b.ToTable("SchedulerBookings");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowMultipleBookings")
                        .HasColumnType("boolean");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int?>("SchedulerId")
                        .HasColumnType("integer");

                    b.Property<string>("SlotType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SchedulerId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_SchedulerSlot_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_SchedulerSlot_TenantId_Created");

                    b.ToTable("SchedulerSlots");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LogicalOperator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ScoringGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ScoringGroupId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ScoringCriteria_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ScoringCriteria_TenantId_Created");

                    b.ToTable("ScoringCriterias");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ScoringProfileId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ScoringProfileId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ScoringGroup_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ScoringGroup_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_ScoringGroup_TenantId_EntityStatus");

                    b.ToTable("ScoringGroups");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<int>("MaxScore")
                        .HasColumnType("integer");

                    b.Property<int>("MinScore")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TargetEntityType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ScoringProfile_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ScoringProfile_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_ScoringProfile_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_ScoringProfile_TenantId_IsDeleted");

                    b.ToTable("ScoringProfiles");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringRuleCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComparisonValue")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ConditionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("LogicalOperator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<int>("ScoringCriteriaId")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ScoringCriteriaId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_ScoringRuleCondition_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_ScoringRuleCondition_TenantId_Created");

                    b.ToTable("ScoringRuleConditions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Sequence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("OwnerId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Sequence_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_Sequence_TenantId_Created");

                    b.HasIndex("TenantId", "EntityStatus")
                        .HasDatabaseName("IX_Sequence_TenantId_EntityStatus");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_Sequence_TenantId_IsDeleted");

                    b.ToTable("Sequences");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SequenceStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityOwnerId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<int>("DelayDays")
                        .HasColumnType("integer");

                    b.Property<int>("DelayMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IncludeWeekends")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ScheduledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SequenceId")
                        .HasColumnType("integer");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StepType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SequenceId");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_SequenceStep_TenantId");

                    b.HasIndex("TenantId", "Created")
                        .HasDatabaseName("IX_SequenceStep_TenantId_Created");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("IX_SequenceStep_TenantId_IsDeleted");

                    b.ToTable("SequenceSteps");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("CancelAtPeriodEnd")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("CancellationRequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<DateTimeOffset>("CurrentPeriodEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CurrentPeriodStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("FirstPaymentFailureAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("GracePeriodEndsAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("HasReachedMaxRetries")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInGracePeriod")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LastPaymentFailedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentProviderSubscriptionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PaymentRetryCount")
                        .HasColumnType("integer");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CanceledAt")
                        .HasDatabaseName("IX_Subscription_CanceledAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("IsInGracePeriod")
                        .HasDatabaseName("IX_Subscription_IsInGracePeriod");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PaymentProviderSubscriptionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Subscription_PaymentProviderSubscriptionId");

                    b.HasIndex("PlanId")
                        .HasDatabaseName("IX_Subscription_PlanId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId")
                        .HasDatabaseName("IX_Subscription_TenantId");

                    b.HasIndex("Status", "CurrentPeriodEnd")
                        .HasDatabaseName("IX_Subscription_Status_CurrentPeriodEnd");

                    b.HasIndex("TenantId", "CurrentPeriodEnd")
                        .HasDatabaseName("IX_Subscription_TenantId_CurrentPeriodEnd");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("IX_Subscription_TenantId_Status");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Domain")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentProviderCustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Settings")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PaymentProviderCustomerId")
                        .IsUnique();

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.TenantUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("DateNumberFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("EntityStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("InvitedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LeftAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("ResumedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("SuspendedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TenantId")
                        .HasColumnType("integer");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EntityStatus")
                        .HasDatabaseName("IX_TenantUser_EntityStatus");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("TenantId", "ApplicationUserId")
                        .IsUnique();

                    b.ToTable("TenantUsers");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.TenantUserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("LastModified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TenantUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("LastModifiedBy");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TenantUserId", "RoleName")
                        .IsUnique();

                    b.ToTable("TenantUserRoles");
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsSystemRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Full system access across all tenants",
                            IsSystemRole = true,
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Full access within assigned tenant",
                            IsSystemRole = true,
                            Name = "TenantAdmin",
                            NormalizedName = "TENANTADMIN"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTimeOffset(new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "Regular user access within assigned tenant",
                            IsSystemRole = true,
                            Name = "NonTenantAdmin",
                            NormalizedName = "NONTENANTADMIN"
                        });
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("DateNumberFormat")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTimeOffset?>("DeactivatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultCurrency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<DateTimeOffset?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mobile")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRule", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "AssignToUser")
                        .WithMany("AssignmentRules")
                        .HasForeignKey("AssignToUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignToUser");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRuleCondition", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.AssignmentRulesSet", "AssignmentRulesSet")
                        .WithMany("Conditions")
                        .HasForeignKey("AssignmentRulesSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentRulesSet");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRuleHistory", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.AssignmentRule", "AssignmentRule")
                        .WithMany("AssignmentHistories")
                        .HasForeignKey("AssignmentRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "NewAssignedUser")
                        .WithMany("NewAssignmentRuleHistories")
                        .HasForeignKey("NewAssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "PreviousAssignedUser")
                        .WithMany("PreviousAssignmentRuleHistories")
                        .HasForeignKey("PreviousAssignedUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "TriggeredByUser")
                        .WithMany("TriggeredAssignmentRuleHistories")
                        .HasForeignKey("TriggeredByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AssignmentRule");

                    b.Navigation("NewAssignedUser");

                    b.Navigation("PreviousAssignedUser");

                    b.Navigation("Tenant");

                    b.Navigation("TriggeredByUser");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRulesSet", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.AssignmentRule", "AssignmentRule")
                        .WithMany("RulesSets")
                        .HasForeignKey("AssignmentRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignmentRule");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ChannelAccount", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Deal", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "Organization")
                        .WithMany("Deals")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Deals")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Deals")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany("Deals")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.PipelineStage", "PipelineStage")
                        .WithMany("Deals")
                        .HasForeignKey("PipelineStageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("Pipeline");

                    b.Navigation("PipelineStage");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealInstallment", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Deal", "Deal")
                        .WithMany("Installments")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealProduct", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Deal", "Deal")
                        .WithMany("DealProducts")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Product", "Product")
                        .WithMany("DealProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.ProductVariant", "ProductVariant")
                        .WithMany("DealProducts")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.DealStageHistory", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Deal", "Deal")
                        .WithMany("StageHistories")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.PipelineStage", "NextStage")
                        .WithMany()
                        .HasForeignKey("NextStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany("StageHistories")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.PipelineStage", "PipelineStage")
                        .WithMany("StageHistories")
                        .HasForeignKey("PipelineStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.PipelineStage", "PreviousStage")
                        .WithMany()
                        .HasForeignKey("PreviousStageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("NextStage");

                    b.Navigation("Pipeline");

                    b.Navigation("PipelineStage");

                    b.Navigation("PreviousStage");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityActivity", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "AssignedBy")
                        .WithMany("AssignedByActivities")
                        .HasForeignKey("AssignedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "AssignedTo")
                        .WithMany("AssignedActivities")
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SchedulerBooking", "SchedulerBooking")
                        .WithMany("Activities")
                        .HasForeignKey("SchedulerBookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SequenceStep", "SequenceStep")
                        .WithMany("Activities")
                        .HasForeignKey("SequenceStepId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", null)
                        .WithMany("Activities")
                        .HasForeignKey("TenantUserId");

                    b.Navigation("AssignedBy");

                    b.Navigation("AssignedTo");

                    b.Navigation("SchedulerBooking");

                    b.Navigation("SequenceStep");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityActivityParticipant", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.EntityActivity", "Activity")
                        .WithMany("Participants")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("ParticipatingActivities")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Activity");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityChangeLog", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityComment", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityDocument", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityFile", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityImage", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityLabel", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "AssignedByUser")
                        .WithMany("AssignedByLabels")
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Label", "Label")
                        .WithMany("Labels")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedByUser");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityNote", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Author")
                        .WithMany("Notes")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityParticipant", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Participants")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityPrice", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntitySequenceEnrollment", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SequenceStep", "CurrentStep")
                        .WithMany("CurrentEnrollments")
                        .HasForeignKey("CurrentStepId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Sequence", "Sequence")
                        .WithMany("Enrollments")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrentStep");

                    b.Navigation("Sequence");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Label", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Lead", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Deal", "Deal")
                        .WithOne("Lead")
                        .HasForeignKey("ConnectFlow.Domain.Entities.Lead", "DealId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "Organization")
                        .WithMany("Leads")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Leads")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Leads")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Organization");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.NoteReaction", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.EntityNote", "Note")
                        .WithMany("Reactions")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "User")
                        .WithMany("NoteReactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Organization", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Organizations")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.OrganizationRelationship", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "PrimaryOrganization")
                        .WithMany("PrimaryRelationships")
                        .HasForeignKey("PrimaryOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "RelatedOrganization")
                        .WithMany("RelatedRelationships")
                        .HasForeignKey("RelatedOrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrimaryOrganization");

                    b.Navigation("RelatedOrganization");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Person", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "Organization")
                        .WithMany("People")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("People")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PersonEmail", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Emails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PersonPhone", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Pipeline", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ScoringProfile", "ScoringProfile")
                        .WithMany("Pipelines")
                        .HasForeignKey("ScoringProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringProfile");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PipelineStage", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Pipeline", "Pipeline")
                        .WithMany("Stages")
                        .HasForeignKey("PipelineId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pipeline");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Plan", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Product", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Products")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductCategory", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ProductCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentCategory");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductVariant", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Product", "Product")
                        .WithMany("Variants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Project", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Organization", "Organization")
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Person", "Person")
                        .WithMany("Projects")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.ProjectBoard", "ProjectBoard")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectBoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.ProjectPhase", "ProjectPhase")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Owner");

                    b.Navigation("Person");

                    b.Navigation("ProjectBoard");

                    b.Navigation("ProjectPhase");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectBoard", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectDeal", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Deal", "Deal")
                        .WithMany("ProjectDeals")
                        .HasForeignKey("DealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Project", "Project")
                        .WithMany("ProjectDeals")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Project");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectPhase", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ProjectBoard", "ProjectBoard")
                        .WithMany("Phases")
                        .HasForeignKey("ProjectBoardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectBoard");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Assignee")
                        .WithMany("AssignedProjectTasks")
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ProjectTask", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("ParentTask");

                    b.Navigation("ProjectPhase");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Scheduler", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Schedulers")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerAvailability", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Scheduler", "Scheduler")
                        .WithMany("Availabilities")
                        .HasForeignKey("SchedulerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scheduler");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerBooking", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "CancelledBy")
                        .WithMany()
                        .HasForeignKey("CancelledById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SchedulerBooking", "RescheduledFromBooking")
                        .WithOne()
                        .HasForeignKey("ConnectFlow.Domain.Entities.SchedulerBooking", "RescheduledFromBookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SchedulerBooking", "RescheduledToBooking")
                        .WithOne()
                        .HasForeignKey("ConnectFlow.Domain.Entities.SchedulerBooking", "RescheduledToBookingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.SchedulerSlot", "SchedulerSlot")
                        .WithMany("Bookings")
                        .HasForeignKey("SchedulerSlotId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CancelledBy");

                    b.Navigation("RescheduledFromBooking");

                    b.Navigation("RescheduledToBooking");

                    b.Navigation("SchedulerSlot");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerSlot", b =>
                {
                    b.HasOne("ConnectFlow.Domain.Entities.SchedulerAvailability", "Availability")
                        .WithMany("GeneratedSlots")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Scheduler", "Scheduler")
                        .WithMany("ManualSlots")
                        .HasForeignKey("SchedulerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Availability");

                    b.Navigation("Scheduler");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringCriteria", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ScoringGroup", "ScoringGroup")
                        .WithMany("ScoringCriterias")
                        .HasForeignKey("ScoringGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringGroup");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringGroup", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ScoringProfile", "ScoringProfile")
                        .WithMany("ScoringGroups")
                        .HasForeignKey("ScoringProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringProfile");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringProfile", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringRuleCondition", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.ScoringCriteria", "ScoringCriteria")
                        .WithMany("Conditions")
                        .HasForeignKey("ScoringCriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScoringCriteria");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Sequence", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "Owner")
                        .WithMany("Sequences")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SequenceStep", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("DeletedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Sequence", "Sequence")
                        .WithMany("Steps")
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sequence");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Subscription", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Tenant", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.TenantUser", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany("TenantUsers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.Tenant", "Tenant")
                        .WithMany("TenantUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.TenantUserRole", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConnectFlow.Domain.Entities.TenantUser", "TenantUser")
                        .WithMany("TenantUserRoles")
                        .HasForeignKey("TenantUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TenantUser");
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("ConnectFlow.Infrastructure.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRule", b =>
                {
                    b.Navigation("AssignmentHistories");

                    b.Navigation("RulesSets");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.AssignmentRulesSet", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Deal", b =>
                {
                    b.Navigation("DealProducts");

                    b.Navigation("Installments");

                    b.Navigation("Lead")
                        .IsRequired();

                    b.Navigation("ProjectDeals");

                    b.Navigation("StageHistories");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityActivity", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.EntityNote", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Label", b =>
                {
                    b.Navigation("Labels");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Organization", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("Leads");

                    b.Navigation("People");

                    b.Navigation("PrimaryRelationships");

                    b.Navigation("Projects");

                    b.Navigation("RelatedRelationships");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Person", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("Emails");

                    b.Navigation("Leads");

                    b.Navigation("Participants");

                    b.Navigation("ParticipatingActivities");

                    b.Navigation("Phones");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Pipeline", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("StageHistories");

                    b.Navigation("Stages");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.PipelineStage", b =>
                {
                    b.Navigation("Deals");

                    b.Navigation("StageHistories");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Plan", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Product", b =>
                {
                    b.Navigation("DealProducts");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProductVariant", b =>
                {
                    b.Navigation("DealProducts");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectDeals");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectBoard", b =>
                {
                    b.Navigation("Phases");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectPhase", b =>
                {
                    b.Navigation("ProjectTasks");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ProjectTask", b =>
                {
                    b.Navigation("SubTasks");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Scheduler", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("ManualSlots");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerAvailability", b =>
                {
                    b.Navigation("GeneratedSlots");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerBooking", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SchedulerSlot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringCriteria", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringGroup", b =>
                {
                    b.Navigation("ScoringCriterias");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.ScoringProfile", b =>
                {
                    b.Navigation("Pipelines");

                    b.Navigation("ScoringGroups");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Sequence", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Steps");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.SequenceStep", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("CurrentEnrollments");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("Subscriptions");

                    b.Navigation("TenantUsers");
                });

            modelBuilder.Entity("ConnectFlow.Domain.Entities.TenantUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("AssignedActivities");

                    b.Navigation("AssignedByActivities");

                    b.Navigation("AssignedByLabels");

                    b.Navigation("AssignedProjectTasks");

                    b.Navigation("AssignmentRules");

                    b.Navigation("Comments");

                    b.Navigation("Deals");

                    b.Navigation("Leads");

                    b.Navigation("NewAssignmentRuleHistories");

                    b.Navigation("NoteReactions");

                    b.Navigation("Notes");

                    b.Navigation("Organizations");

                    b.Navigation("People");

                    b.Navigation("PreviousAssignmentRuleHistories");

                    b.Navigation("Products");

                    b.Navigation("Projects");

                    b.Navigation("Schedulers");

                    b.Navigation("Sequences");

                    b.Navigation("TenantUserRoles");

                    b.Navigation("TriggeredAssignmentRuleHistories");
                });

            modelBuilder.Entity("ConnectFlow.Infrastructure.Identity.ApplicationUser", b =>
                {
                    b.Navigation("TenantUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
