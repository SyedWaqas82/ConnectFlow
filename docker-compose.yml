name: connect_flow

services:
  # api:
  #   container_name: api
  #   image: api
  #   restart: always
  #   build:
  #     context: .
  #     dockerfile: src/Web/Dockerfile
  #   ports:
  #     - "5010:80"
  #   environment:
  #     - ASPNETCORE_ENVIRONMENT=Development
  #     - ASPNETCORE_URLS=http://+:80
  #     - ConnectionStrings__ConnectFlowDb=Host=postgres;Database=connectflow;Username=postgres;Password=postgres
  #     - ConnectionStrings__Redis=redis:6379
  #     - RedisSettings__InstanceName="ConnectFlow_Dev:"
  #     - JwtSettings__Key=development_key_min_256_bits_please_change_in_production_87654321
  #     - JwtSettings__Issuer=ConnectFlow.Dev
  #     - JwtSettings__Audience=ConnectFlow.Dev
  #     - JwtSettings__AccessTokenExpirationMinutes=60
  #     - JwtSettings__RefreshTokenExpirationDays=7
  #     - TenantSettings__HeaderName=X-Tenant-Id
  #     - Monitoring__UseLoki=true
  #     - Monitoring__LokiUrl=http://loki:3100
  #     - Monitoring__OtlpEndpoint=http://tempo:4317
  #     - Monitoring__PrometheusUrl=http://prometheus:9090
  #     - Monitoring__GrafanaUrl=http://grafana:3000
  #     - RateLimiting__Enabled=true
  #     - RateLimiting__FixedWindow__PermitLimit=300
  #     - RateLimiting__FixedWindow__WindowSeconds=60
  #     - RateLimiting__TokenBucket__TokenLimit=100
  #     - RateLimiting__TokenBucket__TokensPerPeriod=20
  #     - QuartzSettings__ConnectionStringName=ConnectFlowDb
  #     - QuartzSettings__SchedulerName=ConnectFlowScheduler
  #     - QuartzSettings__InstanceId=AUTO
  #     - QuartzSettings__UsePersistentStore=true
  #     - QuartzSettings__UseProperties=true
  #     - QuartzSettings__TablePrefix=QRTZ_
  #     - QuartzSettings__UseClustering=false
  #     - QuartzSettings__ClusterCheckinIntervalSeconds=15
  #     - QuartzSettings__MaxConnections=5
  #     - QuartzSettings__MisfireThresholdSeconds=60
  #     - QuartzSettings__MaxMisfireCount=20
  #     - QuartzSettings__SerializerType=json
  #     - QuartzSettings__ValidateSchema=true
  #     - HealthChecksUI__HealthChecks__0__Uri=http://api:80/health
  #     - RabbitMQ__HostName=rabbitmq
  #     - RabbitMQ__Port=5672
  #     - RabbitMQ__UserName=guest
  #     - RabbitMQ__Password=guest
  #     - RabbitMQ__VirtualHost=/
  #     - RabbitMQ__UseSSL=false
  #     - RabbitMQ__PrefetchCount=10
  #     - RabbitMQ__MaxConcurrentConsumers=5
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_started
  #   networks:
  #     - default
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:80/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s

  # Database
  postgres:
    container_name: postgres
    image: postgres:14-alpine
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=connectflow
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - default

  # Cache
  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - default

  # Message Broker
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13-management
    restart: unless-stopped
    ports:
      - "5672:5672" # AMQP protocol port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - default

  # Node metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - default

  # RabbitMQ metrics exporter
  rabbitmq-exporter:
    image: kbudde/rabbitmq-exporter:latest
    container_name: rabbitmq-exporter
    restart: unless-stopped
    ports:
      - "9419:9419"
    environment:
      - RABBIT_URL=http://rabbitmq:15672
      - RABBIT_USER=guest
      - RABBIT_PASSWORD=guest
      - PUBLISH_PORT=9419
      - INCLUDE_QUEUES=.*
      - RABBIT_CAPABILITIES=bert,no_sort
      - MAX_QUEUES=100
      - RABBIT_EXPORTERS=exchange,node,overview,queue,connections,channels,consumers
      - OUTPUT_FORMAT=prometheus
    depends_on:
      - rabbitmq
    networks:
      - default

  # Metrics storage and collection
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.47.2
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    networks:
      - default
    restart: unless-stopped

  # Dashboard and visualization
  grafana:
    container_name: grafana
    image: grafana/grafana:10.2.2
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    depends_on:
      - prometheus
      - loki
      - tempo
    networks:
      - default
    restart: unless-stopped

  # Log aggregation
  loki:
    container_name: loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/local-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    networks:
      - default
    restart: unless-stopped

  # Distributed tracing
  tempo:
    container_name: tempo
    image: grafana/tempo:2.3.0
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./monitoring/tempo/tempo.yaml:/etc/tempo.yaml
      - tempo-data:/tmp/tempo
    ports:
      - "3200:3200" # tempo
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp http
    networks:
      - default
    restart: unless-stopped

volumes:
  postgres-data:
    name: local_postgres_volume
  redis-data:
    name: local_redis_volume
  rabbitmq-data:
    name: local_rabbitmq_volume
  prometheus-data:
    name: prometheus_volume
  grafana-data:
    name: grafana_volume
  loki-data:
    name: loki_volume
  tempo-data:
    name: tempo_volume
